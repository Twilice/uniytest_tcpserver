 --- current ---

  * add colorpicker to choose color
 
  * figure out why client suddenly now get "randomly" disconnected - (it's not random, it is painting something error. maybe overload?)
	- if tickrate is reduced to 5 on server the error stops happening. So next step is probably to do a mayor refactoring to fix proper disposing and better threading.
	- also pixels also disappear, probably related to connection failures. (or floating point error) - Messages do not disappear.

 --- todo ---



 * refactoring

 * little better error handling

 * did I say error handling? Need to add a clean way of closing clients manually as well.
 
 * dispose tcpClients if they are disconnected... now we only do it in broadcast. (not fixed yet duo some confusion how socket/tcpClient/stream resources should be disposed correctly)
  

 --- todo later ---
 
  * host somewhere to test real life case
	- need to fix more stable error handling before I start to host it somehwere
	- skip websocket for now... because it needs wss / https etc.

  * need to fix the bytebuffersize to something else than a static 8192 size....

 * figure out how to continuously listen on messages from the client. But without permanently listening to read request. 
	- We want to be able to have 50k clients, but not listen to 50k clients at the same time.
 
 
 
 * javascript timezone.
	- not important, we don't actually care about pure html? It should just send to unity anyways?

 --- think about ---

 * what should the datapackages contain? How to share same structure? (wcf like with libfile?)

 * how to distribute between each service
  - and how to make sure the server does not send to much small update data packages. 
	(1 thread for read and 1 for write is fine. But if we accidentally have 2 thread for write is not fine)

 * force user syncronization? For reconnection



 
 **

 Maybe I'm wrongthinking it again. Maybe it should be more like I initially thought, but with asyncReads instead. So client doesn't have any listener. 
 Server gives the async some execution time (howto?). And communicates back via the same tcpClient class unless disconnected. Then ignore.
  The question is still when should tcpClient be disposed if the request is already handled, but we want the server to relay messages to client without client asking for it.

  tl:dr
  ignore the planned thread sharing between sockets "don't tick/read more than needed". And just make it work for now. Don't need to handle +50k clients at this moment I guess
